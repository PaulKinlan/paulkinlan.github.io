<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: chrome, | Tales of a Developer Advocate]]></title>
  <link href="http://paul.kinlan.me/categories/chrome-/atom.xml" rel="self"/>
  <link href="http://paul.kinlan.me/"/>
  <updated>2015-01-18T11:03:21+00:00</updated>
  <id>http://paul.kinlan.me/</id>
  <author>
    <name><![CDATA[Paul Kinlan]]></name>
    <email><![CDATA[paul.kinlan@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Installing Chrome for Android on an emulator]]></title>
    <link href="http://paul.kinlan.me/installing-chrome-for-android-on-an-emulator/"/>
    <updated>2013-06-11T17:13:00+01:00</updated>
    <id>http://paul.kinlan.me/installing-chrome-for-android-on-an-emulator</id>
    <content type="html"><![CDATA[<p>Let me start by saying it is not possible.  But I have a half solution.</p>

<p>If you have tried to install Chrome for Android before on an emulator you will be intimately familiar with the series of errors that occur, most noteably:</p>

<p><img src="http://paul.kinlan.me/images/chromeandroidfail.png" /></p>

<p>Arghhh… I am not going to document how you get this far because I will just be spreading alot of useless facts that ultimately lead you nowhere…</p>

<p>The problem stems from the fact that Chrome for Android is only available from the Play Store and is not available for general download.  Luckily Chromium is an Open Source project and whilst we don’t have a full Chromium client available we do have access to the Test Shell.</p>

<p>The Test Shell is Chromium without Chrome’s Chrome.  It doesn’t look as pretty but it is fully functional as a Browser (minus all the cool stuff such as bookmarking, sync etc).  It even includes the ability for you to connect the Remote Debugger to it from your Desktop. Brilliant!</p>

<p>You can find all the recent builds at <a href="http://commondatastorage.googleapis.com/chromium-browser-continuous/index.html?path=Android/">http://commondatastorage.googleapis.com/chromium-browser-continuous/index.html?path=Android/</a> and install the builds on your Android device or emulator by running the following command:</p>

<pre><code>adb install [path to the APK you just downloaded]
</code></pre>

<p>This is all pretty cool but still a pain.  Ideally what you want is a way to quickly install the latest build of the Chrome on Android Test Shell on all the connected devices and emulators.  Fortunately, this is possible.  The kind engineers on the chromium project have a file called <a href="http://commondatastorage.googleapis.com/chromium-browser-continuous/Android/LAST_CHANGE">LAST_CHANGE</a> which gives us a pointer to the directory that contains the latest build.  With this in hand we can script the entire process.</p>

<p>The following script will determine the latest build of ChromiumTestShell, download it to a temporary file, extract ChromiumTestShell from the archive (into another temporary file) and then install it on your connected devices and emulators.</p>

<pre><code>#! /bin/sh

LATEST=`curl -s http://commondatastorage.googleapis.com/chromium-browser-continuous/Android/LAST_CHANGE`

echo Latest Chromium Android at $LATEST

TMP_DL=`mktemp -t chrome-android.XXXX`
TMP_APK=`mktemp -t chrome-android.XXXX`
REMOTE_APK=http://commondatastorage.googleapis.com/chromium-browser-continuous/Android/$LATEST/chrome-android.zip
 
echo Downlaoding $REMOTE_APK to $TMP_DL
curl $REMOTE_APK -o $TMP_DL
 
echo Extracting ChromiumTestShell.apk to $TMP_APK
unzip -p $TMP_DL chrome-android/apks/ChromiumTestShell.apk &gt;&gt; $TMP_APK
adb install $TMP_APK
</code></pre>

<p>And that’s it.</p>

<p>I recongnise that there probably a lot of things wrong with this, so I have made it available for modification and improvement on GitHub - <a href="https://github.com/PaulKinlan/chromium-android-installer">https://github.com/PaulKinlan/chromium-android-installer</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Screen Recording from your Android device]]></title>
    <link href="http://paul.kinlan.me/screen-recording-from-your-android-device/"/>
    <updated>2013-06-06T13:45:00+01:00</updated>
    <id>http://paul.kinlan.me/screen-recording-from-your-android-device</id>
    <content type="html"><![CDATA[<p>In our talk for Google I/O 2013 — <a href="http://mobile-html.appspot.com/">Mobile HTML: The future of your sites</a> — we wanted a way to show actual real demos of Chrome in action without have to constantly switch to the projector over to a special device.  Not only does switching cameras waste time, it is also easy to lose the context of what you are demoing in the first place.</p>

<p>The solution we came up with in the end was to record the videos of the device ahead of time and have them in-line in the slides.  I think it worked really well and it looked pretty cool too.   So how did we do it?</p>

<p>Well.  It’s not easy.  Nor is our solution cheap.</p>

<p>It turns out that a lot of Android based devices have the ability to output HDCP via a selection of different methods (MHI, MiniHDMI) and if you can take this stream you can record at the FULL 60FPS at the extact resolution of the screen.  However the problem that you face with this is two fold:</p>

<ol>
  <li>How do you get the output of the HDMI recorded to disk.</li>
  <li>HDCP.</li>
</ol>

<p>Capturing the HDMI output from the device is pretty easy, but a little bit expensive.  We used a device called “<a href="http://www.blackmagicdesign.com/products/intensity/">Blackmagic Insensity Shuttle</a> for Thunderbolt” - this device is AMAZING.  It allows you to attach HDMI and S-Video outputs and stream it into your Mac (or other computer).  You can then use their software to read the data from this new “Camera” and save it directly to a video.</p>

<p>One of the issues you will face is as soon as Android detects you have an HDMI output attached it will force itself into a landscape mode (which is not ideal).  The best solution I have found so far is to use <a href="https://play.google.com/store/apps/details?id=com.coinsoft.android.orientcontrol">Orientation Control</a> (Paid) which lets your force the orientation on the device to be Portrait.</p>

<p>The biggest issue you will face recording from devices is HDCP.  HDCP is a form of copy protection <strong>which you should not try to break or subvert</strong>.  The BlackMagic devices will not record anything with HDCP embeded in the HDMI output.  After some experiementation I found that the Galaxy Nexus does not attach HDCP to the HDMI output and allows you to record the data from the web browser.</p>

<p>And that is pretty much it!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bootstraping your own mobile web testing lab for Android Part 1]]></title>
    <link href="http://paul.kinlan.me/bootstraping-your-own-mobile-device-lab-part-1/"/>
    <updated>2013-02-04T11:08:00+00:00</updated>
    <id>http://paul.kinlan.me/bootstraping-your-own-mobile-device-lab-part-1</id>
    <content type="html"><![CDATA[<p>What do you do if you want to quickly test your sites on mutliple versions of Android at the same time?</p>

<p>There are couple of solutions, such as <a href="http://html.adobe.com/edge/inspect/">Adobe Edge Inspect</a>, but what if you want to create and manage your own in your own workflow?  I haven’t seen single solution yet.</p>

<p>Here is a simple shell script that I created that starts to get you on your way to your own testing lab.  It connects to every single Android device that is attached to your machine by using <code>adb</code> (Android Debugging tool).</p>

<p>The process is as follows (and please suggest better ways):</p>

<ul>
  <li>Kill any existing adb servers</li>
  <li>Get a list of attached devices</li>
  <li>For each device set up port forwarding (required for <a href="https://developers.google.com/chrome-developer-tools/docs/remote-debugging">Chrome Dev tools</a>)</li>
  <li>Fire Android intent to open the browser (with a url if one is on the command line)</li>
</ul>

<script src="https://gist.github.com/4706201.js"></script>

<p>It’s not a complete solution, but it is a nice way to start.  My ultimate goal is to have a <a href="http://www.xda-developers.com/android/adb-fully-working-on-raspberry-pi/">Raspberry PI</a> hosting adb and all the devices that I can attach to it with an attached proxy that will route all my devtools requests to the correct device.</p>

<p>How do you test across mutliple devices?</p>
]]></content>
  </entry>
  
</feed>

